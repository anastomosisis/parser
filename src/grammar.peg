{
  var g = (function() {
    var getLineNumber = function() {
      return line();
    };

    var getColumnNumber = function() {
      return column();
    };

    var getErrorType = function() {
      return SyntaxError;
    };

    var Grammar = require('./grammar');
    return new Grammar(getLineNumber, getColumnNumber, getErrorType);
  })();
}

start
  = __ statements:(Statement*) __ { return g.start(); }

Statement
  = s:StatementTypes EOS __ { return s; }

StatementTypes 
  = LinearConstraint 
  / Virtual 
  / Conditional 
  / Stay
  / Chain
  / ForEach

AndOrExpression
  = head:ConditionalExpression tail:(__ AndOrOp __ ConditionalExpression)* { 
    return g.headTail(head, tail); 
  }

AndOrOp
  = ("AND" / "and" / "And" / "&&") { return '&&'; }
  / ("OR"  / "or"  / "Or"  / "||") { return '||'; }

ConditionalExpression
  = head:AdditiveExpression tail:(__ CondOperator __ AdditiveExpression)* {
      return g.headTail(head, tail);
    }

CondOperator
  = "=="          { return "?=="; }
  / ("<=" / "=<") { return "?<="; }
  / (">=" / "=>") { return "?>="; }
  / "<"           { return "?<";  }
  / ">"           { return "?>";  }
  / "!="          { return "?!="; }

LinearConstraint
  = head:ConstraintAdditiveExpression
    tail:(__ LinearConstraintOperator __ ConstraintAdditiveExpression)* __ strengthAndWeight:StrengthAndWeight? {
      return g.linearConstraint(head, tail, strengthAndWeight);
    }

LinearConstraintOperator
  = "=="          { return "eq";  }
  / ("<=" / "=<") { return "lte"; }
  / (">=" / "=>") { return "gte"; }
  / "<"           { return "lt";  }
  / ">"           { return "gt";  }

ConstraintAdditiveExpression
  = head:ConstraintMultiplicativeExpression
    tail:(__ AdditiveOperator __ ConstraintMultiplicativeExpression)* {
      return g.headTail(head, tail);
    }

AdditiveExpression
  = head:MultiplicativeExpression
    tail:(__ AdditiveOperator __ MultiplicativeExpression)* {
      return g.headTail(head, tail);
    }

AdditiveOperator
  = "+" { return "plus";  }
  / "-" { return "minus"; }

ConstraintMultiplicativeExpression
  = head:ConstraintPrimaryExpression
    tail:(__ MultiplicativeOperator __ ConstraintPrimaryExpression)* {
      return g.headTail(head, tail);
    }

MultiplicativeExpression
  = head:PrimaryExpression
    tail:(__ MultiplicativeOperator __ PrimaryExpression)* {
      return g.headTail(head, tail);
    }

MultiplicativeOperator
  = "*" { return 'multiply'; }
  / "/" { return 'divide';   }

ConstraintPrimaryExpression
  = Var
  / Literal
  / "(" __ expression:ConstraintAdditiveExpression __ ")" {
    return expression;
  }

PrimaryExpression
  = Var
  / Literal
  / "(" __ expression:AndOrExpression __ ")" { return expression; }

Var "variable"
  = selector:Selector? "[" variableNameCharacters:NameChars+ "]" {
      return g.variable(selector, variableNameCharacters);
    }

NameChars
  = [a-zA-Z0-9#.\-_$]

NameCharsWithSpace
  = NameChars / " "

Literal
  = value:(Real / Integer / SignedReal / SignedInteger) { return ['number', value]; }

Integer
  = digits:[0-9]+ { return g.integer(digits); }

SignedInteger
  = sign:[-+] integer:Integer? { return g.signedInteger(sign, integer); }

Real
  = digits:(Integer? "." Integer) { return g.real(digits); }

SignedReal
  = sign:[-+] real:Real { return g.signedReal(sign, real); }

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOS
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__
  = (WhiteSpace / LineTerminatorSequence / Comment)*



// Query Selectors
// ===================================================

Selector
  = "(" _ sel:SelectorFilterChain _ ")" {return sel;}
  / left:SimpleSelector _ {return left;}

SelectorFilterChain
  = filters:ComplexSelector+  {
    var i, len;
    len = filters.length;
    for (i=len-1; i>0; i--) {
      filters[i].splice(1,0,filters[i-1]);
    }
    return filters[len-1];
  }

SimpleSelector "SimpleSelector"
  = VirtualSel / TagSel / IdSel / ClassSel / ReservedSel / PseudoSel

ComplexSelector 
  = SimpleSelector  
  / AttrSel
  / c:Combinator              {return ["$combin",c]}

Combinator "Combinator"
  = _ c:[,><+~!]+ _           {return c.join('');}
  / " "+                      {return " "}

VirtualSel
  = ["] id:[^"]+ ["]          {return ["$virtual",id.join("")];}

TagSel
  = name:SelectorName         {return ["$tag",name];}
  / "*"                       {return ["$*"];}
  
IdSel
  = "#" name:SelectorName     {return ["$id",name];}

ClassSel
  = "." name:SelectorName     {return ["$class",name];}

ReservedSel
  = "::" name:ReservedPseudos {return ["$reserved",name];}
  / "&"                       {return ["$reserved","this"];}

PseudoSel
  = ("::" / ":") name:SelectorName option:PseudoSelOption? {
    if (option) {return ["$pseudo",name,option];}
    return ["$pseudo",name];
  }
  
PseudoSelOption
  = "(" option:[^)]* ")"       {return option.join(""); }

AttrSel
  = "[" attr:[^\]]+ "]"        {return ["$attr",attr.join("")]; }

SelectorName
  = name:SelectorNameChars+    {return name.join("")}

SelectorNameChars
  = [a-zA-Z0-9\-_$]

ReservedPseudos
  = ("document" / "host" / "scope" / "parent")
  / ("window" / "viewport") { return "window"; }
  / ("this" / "") { return "this"; }



// Strength & Weight
// ===================================================

StrengthAndWeight
  = "!" strength:Strength weight:Weight?  {
    return g.strengthAndWeight().valid(strength, weight);
  }
  / "!" .? {
    return g.strengthAndWeight().invalid();
  }

Weight
  = weight:[0-9]+ { return Number(weight.join('')); }

Strength
  = ("required" / "REQUIRED" / "Required") { return "require"; }
  / ("require"  / "REQUIRE"  / "Require")  { return "require"; }
  / ("strong"   / "STRONG"   / "Strong")   { return "strong"; }
  / ("medium"   / "MEDIUM"   / "Medium")   { return "medium"; }
  / ("weak"     / "WEAK"     / "Weak")     { return "weak"; }


// Virtual
// ===================================================
// also see query selectors

Virtual
  = "@" ("-gss-virtual" / "virtual") __ names:VirtualName+ {
    return g.virtualElement(names);
  }

VirtualName
  = '"' name:[^"]+ '"' __ {
    return name.join('');
  }


// Stays
// ===================================================

Stay
  =  StayStart variables:StayVars+ {
      return g.stay(variables);
    }

StayVars
  = __ variable:Var __ ","?  { return g.stayVariable(variable); }

StayStart
  = ("@-gss-stay" / "@stay")



// Conditionals
// ===================================================

Conditional
  = "@cond" __ result:AndOrExpression __ { return g.conditional(result); }



// JS hooks
// ===================================================

ForEach
  = type:ForLooperType __ selector:Selector __ javaScript:JavaScript {
    return g.forEach(type, selector, javaScript)
  }

JavaScript
  = "```" characters:[^`]* "```" { return g.javaScript(characters); }

ForLooperType
  = ("@-gss-for-each" / "@for-each") { return g.forLoopType().forEach(); }
  / ("@-gss-for-all" / "@for-all") { return g.forLoopType().forAll(); }



// Chains
// ===================================================

Chain
  = "@" "-gss-"? "chain" __ selector:Selector __ chainers:Chainer+ __ { //sw:StrengthAndWeight?
    g.chain(selector, chainers);
  }

Chainer
  = headCharacters:[a-zA-Z\-_0-9]+ "(" _
    headExpression:HeadExp? _
    headOperator:ChainEq _
    bridgeValue:BridgeValue? _
    tailOperator:ChainEq? _
    strengthAndWeight:StrengthAndWeight? _ ")"
    tailCharacters:[a-zA-Z\-_0-9]* __ {
      return g.chainer({
        headCharacters: headCharacters,
        headExpression: headExpression,
        headOperator: headOperator,
        bridgeValue: bridgeValue,
        tailOperator: tailOperator,
        strengthAndWeight: strengthAndWeight,
        tailCharacters: tailCharacters
      });
    }

HeadExp
  = operator:ChainMath expression:AdditiveExpression {
    return g.headExpression(operator, expression);
  }

TailExp
  = expression:AdditiveExpression operator:ChainMath {
    return g.tailExpression(expression, operator);
  }

ChainMath
  = "+" { return g.chainMathOperator().plus(); }
  / "-" { return g.chainMathOperator().minus(); }
  / "*" { return g.chainMathOperator().multiply(); }
  / "/" { return g.chainMathOperator().divide(); }

ChainEq
  = operator:LinearConstraintOperator? {
    return g.chainLinearConstraintOperator(operator);
  }

BridgeValue
  = (AdditiveExpression)
