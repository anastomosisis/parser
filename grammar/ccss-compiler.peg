{
  var p, parser, flatten, cs, $s, vars, _varsCache; 

  p = parser = this;

  cs = parser.cs = [];
  parser.addC    = function (c) {
    cs.push(c);
  };
  
  $s = parser.$s = [];
  parser.add$    = function ($) {
    if ($s.indexOf($) === -1) {$s.push($);}
    return $;
  }

  _varsCache = [];
  vars = parser.vars = [];
  parser.addVar      = function (ast,id) {
    if (_varsCache.indexOf(id) === -1) {_varsCache.push(id);vars.push(ast);}
    return ast;
  }

  parser.getResults = function () {
    return {
      "selectors": this.$s,
      "vars": this.vars,
      "constraints": this.cs      
    }
  }
  
  parser.toString = function (x) {
    if (typeof x === "string") {return x}
    if (x instanceof Array) {return x.join("")}
    return ""
  }

  parser.error = function (m,l,c) {
    if (!!l && !!c) {m = m+ " {line:" + l + ", col:" + c + "}"} 
    console.error(m);
    return m;
  }

}

start
  = __ statements:(Statement*) __ { return (parser.getResults()); }

Statement
  = exp:LinearExpression EOS __ { return exp; }
  / stay:Stay                 { return stay; }

Stay 
  =  StayStart vars:StayVars+ EOS __ {
      var stay = ["stay"].concat(vars)
      parser.addC(stay)
      return stay;
    }

StayVars
  = __ v:Var __ ","?  {return v}

StayStart
  = ("@-gss-stay" / "@stay")

LinearExpression
  = head:AdditiveExpression
    tail:(__ EqOperator __ AdditiveExpression)*
    __ s:StrengthAndWeight? {
      var result = head;
      if (s.length === 0) {s = [];}
      for (var i = 0; i < tail.length; i++) {
        result = [
          //"c",
          tail[i][1],
          result,
          tail[i][3]
        ];
        parser.addC([
          //"c",
          tail[i][1],
          head,
          tail[i][3]
        ].concat(s));
        head = tail[i][3];
      }
      return result;
    }

StrengthAndWeight
  = "!" s:Strength w:Weight?  {
      if (w.length === 0) {return [s];}
      return [s,w];
    }
  / "!" .? {return parser.error("Invalid Strength",line,column)}

Weight
  = ":" w:[0-9]+   {return Number(w.join(""))}
  / ":" . {return parser.error("Invalid Weight",line,column)}

Strength
  = ("require"  / "REQUIRE"  / "Require")  {return "require"}
  / ("strong"   / "STRONG"   / "Strong")   {return "strong"}
  / ("medium"   / "MEDIUM"   / "Medium")   {return "medium"}
  / ("weak"     / "WEAK"     / "Weak")     {return "weak"}
  / ("required" / "REQUIRED" / "Required") {return "require"}

EqOperator
  = "==" { return "eq" }
  / "<=" { return "lte" }
  / ">=" { return "gte" }
  / "<"  { return "lt"  }
  / ">"  { return "gt"  }

AdditiveExpression
  = head:MultiplicativeExpression
    tail:(__ AdditiveOperator __ MultiplicativeExpression)* {
      var result = head;
      for (var i = 0; i < tail.length; i++) {
        result = [
          tail[i][1],
          result,
          tail[i][3]
        ];
      }
      return result;
    }

AdditiveOperator
  = "+" { return "plus" }
  / "-" { return "minus" }

MultiplicativeExpression
  = head:UnaryExpression
    tail:(__ MultiplicativeOperator __ UnaryExpression)* {
      var result = head;
      for (var i = 0; i < tail.length; i++) {
        result = [
          tail[i][1],
          result,
          tail[i][3]
        ];
      }
      return result;
    }

MultiplicativeOperator
  = "*" {return "multiply"}
  / "/" {return "divide"}

UnaryExpression
  = PrimaryExpression
  / operator:UnaryOperator __ expression:UnaryExpression {
      return {
        type:       "UnaryExpression",
        operator:   operator,
        expression: expression
      };
    }

UnaryOperator
  = "+"
  / "-"
  /  "!"

PrimaryExpression
  = Measure
  / Var 
  / Literal
  / "(" __ expression:LinearExpression __ ")" { return expression; }

Measure "measure"
  = "measure(" __ v:Var __ ")"  {return ["measure",v]}

Var "variable"
  = $:Selector? "[" v:NameChars+ "]" {       
      var result, id;
      v = v.join("")
      id = "["+v+"]"
      if ($.length !== 0) {
        parser.add$($.selector);
        id = $.selector + id;
        parser.addVar(['get',id,v,$.ast],id);
      }
      else {
        parser.addVar(['get',id,v],id);
        // ['_dimensionize',['get','width'],['get','height']]
      }
      return ['get',id];      
    }

VarNames
  = ""  
  // "position"  {return ["x","y"]}
  // "size"  {return ["width","height"]}


Selector "selector"
  = "#" $:NameChars+  { $=p.toString($); return {selector:"#"+$,ast:["$id",$]} }
  / "." $:NameChars+  { $=p.toString($); return {selector:"."+$,ast:["$class",$]} }
  / "$" $:NameChars+  { $=p.toString($); return {selector:$,ast:["$all",$]} }
  / $:NameChars+  { $=p.toString($); return {selector:$,ast:["$tag",$]} }  
  / "::" $:ReservedPseudos {return {selector:"::"+$,ast:["$reserved", $]}}

ReservedPseudos
  = ("this" / "viewport" / "document")

  //$:(pre:NameChars* "[" attr:NameCharsWithSpace+ "]")  { $=p.toString($); return {selector:$,ast:["$all",$]} }


  

NameChars
  = [a-zA-Z0-9#.\-_$]

NameCharsWithSpace
  = NameChars / " "

Literal
  = val:(Real / Integer) {
    return [ "number",
      val
    ]
  }

Integer
  = digits:[0-9]+ {
    return parseInt(digits.join(""));
  }

Real
  = digits:(Integer "." Integer) {
    return parseFloat(digits.join(""));
  }

SignedInteger
  = [-+]? [0-9]+

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOS
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__
  = (WhiteSpace / LineTerminatorSequence / Comment)*
