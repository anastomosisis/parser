{
  var p, parser, flatten, _varsCache, _measuresCache; 

  p = parser = this;

  p.commands = [];  

  p.cs = [];
  p.addC = function (c) {
    p.commands.push(c);
  };
  
  p.$s = [];
  p.add$ = function ($) {
    if (p.$s.indexOf($) === -1) {p.$s.push($);}
    return $;
  }
  
  _measuresCache = [];
  p.measures = [];
  p.processMeasure = function (ast) {
    var _id;
    _id = ast.toString(); // assuming stringified ast arrays CAN be used for cache lookup
    if (_measuresCache.indexOf(_id) === -1) {
      _measuresCache.push(_id);
      p.measures.push(ast);
    }
    return ast;
  }

  p.getResults = function () {
    return {
      "selectors": p.$s,
      "commands": p.commands
      //"measures": p.measures,
      //"constraints": p.cs      
    }
  }
  
  p.toString = function (x) {
    if (typeof x === "string") {return x}
    if (x instanceof Array) {return x.join("")}
    return ""
  }

  p.error = function (m,l,c) {
    if (!!l && !!c) {m = m+ " {line:" + l + ", col:" + c + "}"} 
    console.error(m);
    return m;
  }

}

start
  = __ statements:(Statement*) __ { return (parser.getResults()); }

Statement
  = exp:LinearExpression EOS __ { return exp; }
  / stay:Stay EOS __            { return stay; }
  / chain:Chain EOS __          { return chain; }
  / js:ForEach EOS __           { return js; }  


Chain
  = "@" "-gss-"? "chain" __ sel:Selector __ chainers:Chainer+ __ { //sw:StrengthAndWeight?
    parser.add$(sel.selector);
    var ast = ['chain',sel.ast];
    chainers.forEach(function(chainer){
        //if (sw && !chainer.__has_sw ) {
        //  chainer = chainer.concat(sw);
        //}
        ast = ast.concat(chainer);        
      });    

    p.addC(ast);
  }

Chainer
  = head:[a-zA-Z\-_0-9]+ "(" _ headExp:HeadExp? _ headEq:ChainEq _ bridgeVal:BridgeValue? _ tailEq:ChainEq? _ sw:StrengthAndWeight? _ ")" tail:[a-zA-Z\-_0-9]* __ {
    var asts = []
    head = p.toString(head);
    tail = p.toString(tail);    
    var getAST = function (op, e1, e2) {
      var ast = [op, e1, e2];
      if (sw) {
        ast = ast.concat(sw);
        //ast.__has_sw = true;
      }
      return ast      
    }
    
    if (tail.length === 0) {tail = head;}
    if (headExp) {
      headExp.splice(1,1,head);
      head = headExp;
    }
    /*
    if (tailExp) {
      tailExp.splice(2,1,tail);
      tail = tailExp;
    }
    */
    if (bridgeVal) {
      asts.push( getAST(headEq,head,bridgeVal) );
      if (tailEq) {
        asts.push( getAST(tailEq,bridgeVal,tail) );
      }
      else {
        p.error("Invalid Chain Statement",line,column);
      }      
    } else {
      asts.push( getAST(headEq,head,tail) );
    }
    return asts;
  }

HeadExp
  = math:ChainMath val:AdditiveExpression {
    return [math, "_REPLACE_ME_", val]
  }

TailExp
  = val:AdditiveExpression math:ChainMath {
    return [math, val, "_REPLACE_ME_"]
  }

ChainMath
  = "+" {return "plus-chain"}
  / "-" {return "minus-chain"}
  / "*" {return "multiply-chain"}
  / "/" {return "divide-chain"}

ChainEq
  = chainEq:EqOperator? {
    if (!chainEq) {chainEq = "eq";}
    chainEq += "-chain";
    return chainEq;
  }

BridgeValue
  = (AdditiveExpression)



ForEach 
  = type:ForLooperType __ sel:Selector __ js:JavaScript {
    parser.add$(sel.selector);
    parser.addC([type,sel.ast,js]);
    }

JavaScript
  = "```" js:[^`]* "```" {return ['js',js.join("").trim()]}

ForLooperType
  = ("@-gss-for-each" / "@for-each") {return "for-each"}
  / ("@-gss-for-all" / "@for-all") {return "for-all"}


Stay 
  =  StayStart vars:StayVars+ {
      var stay = ["stay"].concat(vars)
      parser.addC(stay)
      return stay;
    }

StayVars
  = __ v:Var __ ","?  {return v}

StayStart
  = ("@-gss-stay" / "@stay")

LinearExpression
  = e1:AdditiveExpression
    tail:(__ EqOperator __ AdditiveExpression)*
    __ s:StrengthAndWeight? {
      var eq, e2;
      if (s.length === 0) {s = [];}
      for (var i = 0; i < tail.length; i++) {
        eq = tail[i][1];
        e2 = tail[i][3];
        parser.addC([
          eq,
          e1,
          e2
        ].concat(s));
        e1 = e2;
      }
      return "LineaerExpression";
    }

StrengthAndWeight
  = "!" s:Strength w:Weight?  {
      if (w.length === 0) {return [s];}
      return [s,w];
    }
  / "!" .? {return parser.error("Invalid Strength or Weight",line,column)}

Weight
  = w:[0-9]+   {return Number(w.join(""))}

Strength
  = ("require"  / "REQUIRE"  / "Require")  {return "require"}
  / ("strong"   / "STRONG"   / "Strong")   {return "strong"}
  / ("medium"   / "MEDIUM"   / "Medium")   {return "medium"}
  / ("weak"     / "WEAK"     / "Weak")     {return "weak"}
  / ("required" / "REQUIRED" / "Required") {return "require"}

EqOperator
  = "==" { return "eq" }
  / ("<=" / "=<") { return "lte" }
  / (">=" / "=>") { return "gte" }
  / "<"  { return "lt"  }
  / ">"  { return "gt"  }

AdditiveExpression
  = head:MultiplicativeExpression
    tail:(__ AdditiveOperator __ MultiplicativeExpression)* {
      var result = head;
      for (var i = 0; i < tail.length; i++) {
        result = [
          tail[i][1],
          result,
          tail[i][3]
        ];
      }
      return result;
    }

AdditiveOperator
  = "+" { return "plus" }
  / "-" { return "minus" }

MultiplicativeExpression
  = head:UnaryExpression
    tail:(__ MultiplicativeOperator __ UnaryExpression)* {
      var result = head;
      for (var i = 0; i < tail.length; i++) {
        result = [
          tail[i][1],
          result,
          tail[i][3]
        ];
      }
      return result;
    }

MultiplicativeOperator
  = "*" {return "multiply"}
  / "/" {return "divide"}

UnaryExpression
  = PrimaryExpression
  / operator:UnaryOperator __ expression:UnaryExpression {
      return {
        type:       "UnaryExpression",
        operator:   operator,
        expression: expression
      };
    }

UnaryOperator
  = "+"
  / "-"
  /  "!"

PrimaryExpression
  = Measure
  / Var 
  / Literal
  / "(" __ expression:LinearExpression __ ")" { return expression; }

Measure "measure"
  = "measure(" __ v:Var __ ")"  { return p.processMeasure(["measure",v]);}

Var "variable"
  = sel:Selector? "[" v:NameChars+ "]" {       
      var result, id, _id1, _id2;
      v = v.join("");      
      // if bound to dom query
      if (sel.length !== 0) {
        parser.add$(sel.selector);
        // normalize var names when query bound
        if (v === 'left') {
          v = 'x';
        } else if (v === 'top') {
          v = 'y';
        } else if (v === 'cx') {
          v = 'center-x';
        } else if (v === 'cy') {
          v = 'center-y';
        }
        // normalize window var names
        if (sel.selector === '::window') {
          if (v === 'right') {
            v = 'width'
          } else if (v === 'bottom') {
            v = 'height'
          }
        }              
      }
      
      if (sel.selector) {
        return ['get$',v,sel.ast];
      } else {
        return ['get',"["+v+"]"];
      }
      
    }

VarNames
  = ""  
  // "position"  {return ["x","y"]}
  // "size"  {return ["width","height"]}


Selector "selector"
  = "#" sel:NameChars+  { sel=p.toString(sel); return {selector:"#"+sel,ast:["$id",sel]} }
  / "." sel:NameChars+  { sel=p.toString(sel); return {selector:"."+sel,ast:["$class",sel]} }
  / "$"? "(" sel:QuerySelectorChars+ ")"  { sel=p.toString(sel); return {selector:sel,ast:["$all",sel]} }
  / sel:NameChars+  { sel=p.toString(sel); return {selector:sel,ast:["$tag",sel]} }  
  / "::" sel:ReservedPseudos {return {selector:"::"+sel,ast:["$reserved", sel]}}
  // sel:QuerySelectorChars+ { sel=p.toString(sel); return {selector:sel,ast:["$all",sel]} }

QuerySelectorChars
  = [a-zA-Z0-9#.\-_$=:+>'" \]\[]
  


ReservedPseudos
  = ("document" / "host" / "scope" / "parent")
  / ("window" / "viewport") {return "window"}
  / ("this" / "") {return "this"}

  //sel:(pre:NameChars* "[" attr:NameCharsWithSpace+ "]")  { sel=p.toString(sel); return {selector:sel,ast:["$all",sel]} }


  

NameChars
  = [a-zA-Z0-9#.\-_$]

NameCharsWithSpace
  = NameChars / " "

Literal
  = val:(Real / Integer) {
    return [ "number",
      val
    ]
  }

Integer
  = digits:[0-9]+ {
    return parseInt(digits.join(""));
  }

Real
  = digits:(Integer "." Integer) {
    return parseFloat(digits.join(""));
  }

SignedInteger
  = [-+]? [0-9]+

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOS
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__
  = (WhiteSpace / LineTerminatorSequence / Comment)*
